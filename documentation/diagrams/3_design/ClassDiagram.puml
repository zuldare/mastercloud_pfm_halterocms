@startuml
enum LiftStatus {
  PENDING
  VALID
  NULL
  REJECTED
}

enum LiftType {
  SNATCH
  CLEAN_JERK
}

enum Countdown {
  1_MINUTES(60)
  2_MINUTES(120)
}

enum Bar {
  FEMALE(15kg)
  MALE(20kg)
}

enum Plate {
  BIG_RED (25KG)
  BIG_BLUE (20KG)
  BIG_YELLOW (15KG)
  BIG_GREEN (10KG)
  BIG_WHITE (5)
  SMALL_RED (2.5KG)
  SMALL_BLUE (2KG)
  SMALL_YELLOW (1.5KG)
  SMALL_GREEN (1KG)
  SMALL_WHITE (0.5KG)
}

enum Collar {
  COLLAR(2.5KG)
}

enum Gender {
  MALE(M)
  FEMALE(F)
}

class Marshall {
  changeLiftWeight(Integer newWeight)
}

class Timekeeper {
  + setTimer()
  + pauseTimer()
  + startTimer()
  + resetTimer()
}

class CompetitionSecretary {
  changeLiftWeight(Integer newWeight)
  setLiftStatus(LiftStatus liftStatus)
}


abstract class TechnicalOfficer {
  # String name
}

TechnicalOfficer <|-- CompetitionSecretary
TechnicalOfficer <|-- Marshall
TechnicalOfficer <|-- Timekeeper


class BarSet {
  Bar bar
  List<Plate> plates
  List<Collar> collars

  loadBarsetWithKg(Integer kgs)
}

BarSet *--> Bar
BarSet *--> Plate
BarSet *--> Collar

class Club {
  String name
  List<Lifter> lifters
}


class Competition {
  Inscription inscription
  List<Batch> batches
  ClassificationAct classification
}

class Inscription {
  LocalDateTime start
  LocalDateTime close
}

Competition *--> Inscription

class Batch {
  String name
  String location
  LocalDateTime begining
  List<Platform> platforms
  List<Weighing> weighing
  List<Lift> lifters
}

Competition *--> Batch
Batch *--> Weighing

class Platform {
  name
  List<Lifter> lifters
}
Platform o--> Lift
Platform o--> Lifter

class Weighing {
  String judge
  Lifter lifter
  Float lifterBodyWeight
  Float snatchOpener
  Float cleanJerkOpener
}

Weighing *--> Lifter

class Lifter {
  String name
  Integer birthYear
  Gender gender
  Category category
  Club club
  List<Lift> lifts
}

Lifter *--> Gender

class Category {
   AgeRange ageRange
   BodyWeightRange bodyWeightRange
}

Club o--> Lifter

class AgeRange {
  Integer min
  Integer max
}

class BodyWeightRange {
  Float min
  Float max
}


class CategoryClassification

class SinclairClassification {
  coefficient: SinclairCoefficient
}

class SinclairMaloneClassification {
  coefficient: SinclairMaloneCoefficient
}

class EliteClassification {
  coefficientsMales: [EliteCoefficientMale]
  coefficientsMales: [EliteCoefficientFemale]
}


Category *--> AgeRange
Category o--> BodyWeightRange

class Lift {
  BarSet barset
  LiftType liftType
  Countdown countDown
  LiftStatus liftStatus
  Integer countDown
}

Lifter *--> Lift
Lift *-- LiftType
Lift *-- LiftStatus
Lift *-- Countdown
Lift o-- BarSet

Batch o--> Platform
Lifter *--> Category
Batch o--> Lifter

CompetitionSecretary ..> Lift
Marshall ..> Lift
Timekeeper ..> Lift

Abstract ClassificationAct {
  OrderedList<Lifter> lifters

  # generate()
}



Competition *--> ClassificationAct

ClassificationAct *--> Lifter
ClassificationAct <|-- CategoryClassification
ClassificationAct <|-- SinclairClassification
ClassificationAct <|-- SinclairMaloneClassification
ClassificationAct <|-- EliteClassification

header NOTA !!!!!! Me falta añadir todo el tema de inscriptores, inscripciones, creación de competiciones, batches, etc \n me falta todo el tema de clasificaciones tb
@enduml