@startuml
left to right direction

actor Organizer as Organizer
actor Inscriber as Inscriber
actor Admin as Admin
actor Time as Time
actor TimeJudge as TimeJudge
actor Spectator as Spectator
actor CompetitionSecretary as CompetitionSecretary

package Admin_Management {
  usecase "Create/Modify club" as createClub
  usecase "Delete club" as deleteClub
  usecase "Manage clubs" as manageClubs

  usecase "Create/Modify organizer" as createOrganizer
  usecase "Delete organizer" as deleteOrganizer
  usecase "Manage organizers" as manageOrganizers

  usecase "Delete inscriber" as deleteInscriber
  usecase "Create/Modify inscriber" as createInscriber
  usecase "Manage inscribers" as manageInscribers

  usecase "Toggle category availability" as toggleCategory
  usecase "Delete category" as deleteCategory
  usecase "Create/Modify category" as createCategory
  usecase "Manage categories" as manageCategories
}

manageClubs --> createClub
manageClubs --> deleteClub
Admin --> manageClubs

manageOrganizers --> deleteOrganizer
manageOrganizers --> createOrganizer
Admin --> manageOrganizers

manageInscribers --> deleteInscriber
manageInscribers --> createInscriber
Admin --> manageInscribers

manageCategories --> deleteCategory
manageCategories --> createCategory
manageCategories --> toggleCategory
Admin --> manageCategories

package COMPETITION_BUROCRACY {
  usecase "Create/Modify competition" as createCompetition
  usecase "Delete competition" as deleteCompetition
  usecase "Manage competition" as manageCompetition

  usecase "setCompetitionType" as setCompetitionType
  usecase "Set competition date" as setCompetitionDate
  usecase "Set competition location" as setCompetitionLocation
  usecase "Set number of bounds" as setNumberOfBounds
  usecase "Set inscription period" as setInscriptionPeriod

  createCompetition --> setCompetitionDate
  createCompetition --> setInscriptionPeriod
  createCompetition ---> setCompetitionLocation
  createCompetition ---> setNumberOfBounds
  createCompetition --> setCompetitionType

  usecase "Toggle competition visibility data" as toggle
  usecase "Inscribe athlete" as inscribeAthlete
  usecase "Uninscribe athlete" as uninscribeAthlete
}

manageCompetition --> deleteCompetition
manageCompetition --> createCompetition
Organizer --> manageCompetition
Organizer --> toggle
Inscriber --> inscribeAthlete
Inscriber --> uninscribeAthlete

package BOUND_MANAGEMENT {
  usecase "Create/Modify bound" as createBound
}

Organizer --> createBound

'
'
'package BOUND_BUROCRACY {
'  Organizer --> (Create bound)
'  (Create bound) --> (Set date)
'  (Create bound) --> (Set location)
'  (Create bound) --> (Set number of platforms)
'  (Create bound) --> (Set gender)
'  Organizer --> (Assign athlete to bound)
'  Organizer --> (Delete bound)
'  Organizer --> (Unassigned athlete to bound)
'}
'
'package SPECTATOR_VIEW {
'  (View competition data)
'  (View bound data)
'  (View bound play)
'  note right of (View bound play): Spectator can see the development of a competition on air
'
'  (View bound results)
'  (View classifications)
'  (Download classifications)
'  (View weightin act)
'}
'
'Spectator --> (View competition data)
'Spectator --> (View bound data)
'Spectator --> (View bound play)
'
'Spectator --> (View bound results)
'Spectator --> (View classifications)
'Spectator --> (Download classifications)
'Spectator --> (View weightin act)
'
'left to right direction
'CompetitionSecretary --> (Set lift status)
'CompetitionSecretary --> (Set lift value)
'
'CompetitionSecretary --> (Generate bound act)
'Organizer --> (Generate bound act)

package TIMER {
  usecase "Start timer" as startTimer
  usecase "Pause timer" as pauseTimer
  usecase "Resume timer" as resumeTimer
  usecase "Set timer duration" as setTimerDuration
  usecase "Stop timer" as stopTimer
}

TimeJudge --> startTimer
TimeJudge --> pauseTimer
TimeJudge --> resumeTimer
TimeJudge --> stopTimer
TimeJudge --> setTimerDuration
Time --> stopTimer

@enduml